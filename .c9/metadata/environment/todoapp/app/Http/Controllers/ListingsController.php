{"filter":false,"title":"ListingsController.php","tooltip":"/todoapp/app/Http/Controllers/ListingsController.php","undoManager":{"mark":11,"position":11,"stack":[[{"start":{"row":3,"column":0},"end":{"row":4,"column":0},"action":"insert","lines":["",""],"id":2}],[{"start":{"row":4,"column":0},"end":{"row":7,"column":0},"action":"insert","lines":["use App\\Listing;","　use Auth;","　use Validator;",""],"id":3}],[{"start":{"row":5,"column":1},"end":{"row":6,"column":0},"action":"insert","lines":["",""],"id":4},{"start":{"row":6,"column":0},"end":{"row":6,"column":1},"action":"insert","lines":["　"]}],[{"start":{"row":6,"column":0},"end":{"row":6,"column":1},"action":"remove","lines":["　"],"id":5},{"start":{"row":5,"column":1},"end":{"row":6,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":5,"column":1},"end":{"row":6,"column":0},"action":"insert","lines":["",""],"id":6},{"start":{"row":6,"column":0},"end":{"row":6,"column":1},"action":"insert","lines":["　"]}],[{"start":{"row":6,"column":0},"end":{"row":6,"column":1},"action":"remove","lines":["　"],"id":7}],[{"start":{"row":6,"column":9},"end":{"row":7,"column":0},"action":"remove","lines":["",""],"id":8}],[{"start":{"row":6,"column":9},"end":{"row":6,"column":10},"action":"remove","lines":["　"],"id":9},{"start":{"row":6,"column":9},"end":{"row":7,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":6,"column":9},"end":{"row":7,"column":0},"action":"insert","lines":["",""],"id":10}],[{"start":{"row":6,"column":9},"end":{"row":7,"column":0},"action":"remove","lines":["",""],"id":11}],[{"start":{"row":5,"column":0},"end":{"row":5,"column":1},"action":"remove","lines":["　"],"id":12},{"start":{"row":4,"column":16},"end":{"row":5,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":12,"column":6},"end":{"row":66,"column":0},"action":"insert","lines":["//===ここからコンストラクタの追加===","    //コンストラクタ （このクラスが呼ばれると最初にこの処理をする）","    public function __construct()","    {","        // ログインしていなかったらログインページに遷移する（この処理を消すとログインしなくてもページを表示する）","        $this->middleware('auth');","    }","    //===ここまでコンストラクタの追加===","","    //===ここからリストの一覧表示をするための処理追加===","    public function index()","    {","        // Listingモデルを介してデータベースからデータを取得。whereで取得したデータは配列になっている。","        $listings = Listing::where('user_id', Auth::user()->id)","            ->orderBy('created_at', 'asc')","            ->get();","            ","         // コントローラからビューへの値の受け渡しをview関数を使って実施","        return view('listing/index', ['listings' => $listings]);","    }","    // ===ここまでリストの一覧表示をするための処理追加===","","    // ===ここからリストを新規作成する処理の追加（フォームへの遷移）===","    public function new()","    {","        return view('listing/new');","        // テンプレート「listing/new.blade.php」を表示します。","    }","    // ===ここまでリストを新規作成する処理の追加（フォームへの遷移）===","","","    // ===ここからリストを新規作成する処理の追加（データベースへの保存）===","    public function store(Request $request)","    {","        //Validatorを使って入力された値のチェック(バリデーション)処理　（今回は255以上と空欄の場合エラーになります）","        $validator = Validator::make($request->all() , ['list_name' => 'required|max:255', ]);","","        //バリデーションの結果がエラーの場合","        if ($validator->fails())","        {","            return redirect()->back()->withErrors($validator->errors())->withInput();","            // 上記では、入力画面に戻りエラーメッセージと、入力した内容をフォーム表示させる処理を記述しています","        }","","        // 入力に問題がなければListingモデルを介して、作ったユーザーidとタイトルをlistingsテーブルに保存","        $listings = new Listing;","        $listings->title = $request->list_name;","        $listings->user_id = Auth::user()->id;","        $listings->save();","        ","        // 「/」 ルートにリダイレクト","        return redirect('/');","    }","    // ===ここまでリストを新規作成する処理の追加（データベースへの保存）===",""],"id":13}]]},"ace":{"folds":[],"scrolltop":306.5,"scrollleft":0,"selection":{"start":{"row":66,"column":0},"end":{"row":66,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1589521856609,"hash":"9478196104557b143984e502a1c386825713251a"}